import os
import base64
import json

from cryptography.hazmat.primitives.asymmetric import rsa, padding as a_padding
from cryptography.hazmat.primitives import serialization, padding, hashes
from base64 import b64decode, b64encode
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.ciphers import (
    Cipher, algorithms, modes
)

key_size = 32
IVLength = 16

def RSAKeyGen (pathToPrivateKey, pathToPublicKey):

    private_key = rsa.generate_private_key(
        public_exponent=65537,
        key_size=2048,
        backend=default_backend())

    pem = private_key.private_bytes(
       encoding=serialization.Encoding.PEM,
       format=serialization.PrivateFormat.TraditionalOpenSSL,
       encryption_algorithm=serialization.NoEncryption()
    )

    public_key = private_key.public_key()

    pub_pem = public_key.public_bytes(
       encoding=serialization.Encoding.PEM,
       format=serialization.PublicFormat.SubjectPublicKeyInfo
    )

    with open(pathToPrivateKey, 'wb') as privatePEM:
        privatePEM.write(pem)

    with open(pathToPublicKey, 'wb') as publicPEM:
        publicPEM.write(pub_pem)

    privatePEM.close()
    publicPEM.close()

def RSAEncrypt(filepath, RSA_Publickey_filepath):
    C, IV, key, ext = fileEncrypt(filepath)

    saveFile("testKeyForRSAEncyption", b64encode(key).decode('utf-8'), ".txt")

    #load
    with open(RSA_Publickey_filepath, "rb") as public_key:
        public_key = serialization.load_pem_public_key(
            public_key.read(),
            backend=default_backend()
        )

    RSACipher = public_key.encrypt(
        key,
        a_padding.OAEP(
        mgf=a_padding.MGF1(algorithm=hashes.SHA256()),
        algorithm=hashes.SHA256(),
        label=None
        )
    )
    saveFile("testKeyForRSAEncyption2", b64encode(RSACipher).decode('utf-8'), ".txt")

    return(RSACipher, C, IV, ext)

def RSADecrypt(RSAcipher, ciphertext, iv, ext, RSA_PrivateKeyPath):

    with open(RSA_PrivateKeyPath, "rb") as key_file:
        private_key = serialization.load_pem_private_key(
            key_file.read(),
            password = None,
            backend = default_backend()
        )

    key = private_key.decrypt(RSAcipher,
            a_padding.OAEP(mgf=a_padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None)
    )

    plaintext = decrypt(ciphertext, key, iv)

    return plaintext, ext

def encrypt(key, plaintext):
    if len(key) < key_size:
        print("Error: the key must be greater than 256-bits in length")
        return ()

    # Initializes the iv
    iv = os.urandom(IVLength)
    # Construct an AES-GCM Cipher object with the given key and a
    # randomly generated IV.
    encryptor = Cipher(
        algorithms.AES(key),
        modes.CBC(iv),
        default_backend()
    ).encryptor()

    # Encrypt the plaintext and get the associated ciphertext.
    ciphertext = encryptor.update(plaintext) + encryptor.finalize()

    return (ciphertext, iv)

def decrypt(ciphertext,key, iv):
    if len(key) < key_size:
        print("Error: The key must be 256-bits in length.")
        return ()

    # Construct an AES-GCM Cipher object with the given key and a
    # randomly generated IV.
    decryptor = Cipher(
        algorithms.AES(key),
        modes.CBC(iv),
        default_backend()
    ).decryptor()

    # Decrypt the plaintext and get the associated ciphertext.
    plaintext = decryptor.update(ciphertext) + decryptor.finalize()

    return plaintext

def fileEncrypt (filename):

    name, ext = os.path.splitext(filename)

    with open(filename, "rb") as someData:
        plaintext = someData.read()

    #pads the plaintext
    padder = padding.PKCS7(128).padder()
    padded_data = padder.update(plaintext) + padder.finalize()

    key = os.urandom(key_size)

    ciphertext, iv = encrypt(key, padded_data)

    someData.close()
    return (ciphertext, iv, key, ext)

def fileDecrypt (filename):

    key, iv, ciphertext, ext = loadFileFromJSON(filename)

    plaintext = decrypt(ciphertext, key, iv)

    #unpads the plaintext
    unpadder = padding.PKCS7(128).unpadder()
    plaintext = unpadder.update(plaintext) + unpadder.finalize()

    return (plaintext, ext)

def loadFileFromJSON(filepath):

    with open(filepath, 'r') as json_file:
        data = json.load(json_file)

    key = b64decode(data["Key"])
    iv = b64decode(data["IV"])
    text = b64decode(data["Text"])
    ext = data["Extension"]

    json_file.close()
    return (key, iv, text, ext)

def saveFileAsJSON (saveFilePath, iv, key, text, ext):

    data = {
        'IV': b64encode(iv).decode('utf-8'),
        'Key': b64encode(key).decode('utf-8'),
        'Text': b64encode(text).decode('utf-8'),
        'Extension': ext
        }

    with open(saveFilePath, 'w') as outFile:
        json.dump(data, outFile)
    outFile.close()

def saveFile(filename, plaintext, ext):

    with open(filename + ext, "wb") as sFile:
        sFile.write(plaintext)
    sFile.close()

def main():
    #-----------------------------String test-----------------------------
    #print('\n\nBEGIN MYENCRYPT AND MYDECRYPT STRING TEST')
    #string_to_enc = "This is the test string to test out the encryption and decryption $
    #print('string to encrypt: ' + string_to_enc)
    #string_enc = encrypt.encrypt(string_key, string_to_enc, string_IV)
#    print('encrypted string: ' + string_enc.decode("utf-8"))
    #string_dec = decrypt.decrypt(string_enc, string_key, string_IV)
    #print('decrypted string: ' + string_dec.decode("ascii"))
    #print('END MYENCRYPT AND MYDECRYPT STRING TEST')
    #-----------------------------/String test----------------------------

    RSAKeyGen('.ssh/rsaKey.pem', '.ssh/rsaKey.pem.pub')
    RSAcipher, ciphertext, iv, ext = RSAEncrypt('P51.jpg', '.ssh/rsaKey.pem.pub')
    saveFileAsJSON('toDecrypt.json', iv, RSAcipher, ciphertext, ext)

    RSACipher, iv, ciphertext, ext = loadFileFromJSON('toDecrypt.json')
    plaintext, ext = RSADecrypt(RSACipher, ciphertext, iv, ext, '.ssh/rsaKey.pem')
    saveFile('P51decrypted', plaintext, ext)
if __name__ == '__main__':
    main()

