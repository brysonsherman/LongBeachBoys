import os
import base64
import json

from cryptography.hazmat.primitives import (padding, serialization)
from base64 import b64decode
from base64 import b64encode
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.ciphers import (
    Cipher, algorithms, modes
)

key_size = 32
IVLength = 16

def encrypt(key, plaintext: bytes, iv):
    if len(key) < key_size:
        print("Error: the key must be greater than 256-bits in length")
        return ()

    # Construct an AES-GCM Cipher object with the given key and a
    # randomly generated IV.
    encryptor = Cipher(
        algorithms.AES(key),
        modes.CBC(iv),
        default_backend()
    ).encryptor()

    # Encrypt the plaintext and get the associated ciphertext.
    ciphertext = encryptor.update(plaintext) + encryptor.finalize()

    return ciphertext

def decrypt(ciphertext,key, iv):
    if len(key) < key_size:
        print("Error: The key must be 256-bits in length.")
        return ()

    # Construct an AES-GCM Cipher object with the given key and a
    # randomly generated IV.
    decryptor = Cipher(
        algorithms.AES(key),
        modes.CBC(iv),
        default_backend()
    ).decryptor()

    # Decrypt the plaintext and get the associated ciphertext.
    plaintext = decryptor.update(ciphertext) + decryptor.finalize()

    return plaintext

def fileEncrypt (filename, key, iv, storeToFile):

    name, ext = os.path.splitext(filename)

    with open(filename, "rb") as someData:
        plaintext = someData.read()

    #pads the plaintext
    padder = padding.PKCS7(128).padder()
    padded_data = padder.update(plaintext) + padder.finalize()

    ciphertext = encrypt(key, padded_data, iv)

    data = {
        'IV': b64encode(iv).decode('utf-8'),
        'Key': b64encode(key).decode('utf-8'),
        'Text': b64encode(ciphertext).decode('utf-8'),
        'Extension': ext
        }

    with open(storeToFile, 'w') as outFile:
        json.dump(data, outFile)
    outFile.close()

    return ()

def fileDecrypt (filename, storeToFile):

    with open(filename, 'r') as json_file:
        data = json.load(json_file)

    key = b64decode(data["Key"])
    iv = b64decode(data["IV"])
    ciphertext = b64decode(data["Text"])
    ext = data["Extension"]

    plaintext = decrypt(ciphertext, key, iv)

    #unpads the plaintext
    unpadder = padding.PKCS7(128).unpadder()
    plaintext = unpadder.update(plaintext) + unpadder.finalize()

    with open(storeToFile, "wb") as outFile:
        outFile.write(plaintext)
        outFile.close()

    return ()

# private_key = rsa.generate_private_key( #generate a private key
#     public_exponent=65537,
#     key_size=2048,
#     backend=default_backend()
# )

# private_pem = private_key.private_bytes(
#     encoding=serialization.Encoding.PEM,
#     format=serialization.PrivateFormat.TraditionalOpenSSL,
#     encryption_algorithm=serialization.NoEncryption()
#     )

# public_key = private_key.public_key()

# public_pem = public_key.public_bytes(
#     encoding=serialization.Encoding.PEM,
#     format=serialization.PublicFormat.SubjectPublicKeyInfo
#     )

# private_file = open ("private_key.pem", "wb")
# private_file.write(private_pem)

# public_file = open ("public_key.pem", "wb")
# public_file.write(public_pem)


MyRSAEncrypt(filepath, RSA_Publickey_filepath):
    C, IV, key, ext = fileEncrypt(filepath)

    #load
    with open(RSA_Publickey_filepath, "rb") as key_file:
        private_key = serialization.load_pem_private_key(
            key_file.read(),
            password=CECS378,
            backend=default_backend()
        )

    public_key = private_key.public_key()

    RSACipher = public_key.encrypt(
        key,
        padding.OAEP(
        mgf=padding.MGF1(algorithm=hashes.SHA256()),
        algorithm=hashes.SHA256(),
        label=None
        )
    )


    return(RSACipher, C, IV, ext)

def main():
    filepath = "/home/ubuntu/PythonVirtualEnv/.ssh"
    RSACipher, ct, iv, ext = MyRSAEncrypt(filepath,filepath);

    print(MyRSADecrypt(filepath,filepath,ct,iv,ext))
    print(myFileDecrypt(filepath,ct,iv,key,ext))
    print(myDecrypt(key,ct,iv))
